//     model-dock
//     (c) simonfan
//     model-dock is licensed under the MIT terms.

define(["require","exports","module","lodash","subject","backbone"],function(e,t,n){var r=e("lodash"),i=e("subject"),s=e("backbone"),o=n.exports=i({initialize:function(t){this.initializeModelDock(t)},initializeModelDock:function(t){t&&t.model&&this.attach(t.model)},invokeModelMethod:function(t){if(this.model){var n=Array.prototype.slice.call(arguments,1);return this.model[t].apply(this.model,n)}throw new Error("No model attached to dock. Unable to invoke "+t)},retrieveModelProperty:function(t){if(this.model)return this.model[t];throw new Error("No model attached to dock. Unable to retrieve "+t)},attach:function(t,n){return this.detach(),this.model=t,this.listenTo(this.model,"all",this.trigger),(!n||!n.silent)&&this.trigger("attach",t),this},detach:function(t){if(this.model){var n=this.model;this.stopListening(n),this.model=void 0,(!t||!t.silent)&&this.trigger("detach",n)}return this}});o.proto(s.Events);var u=["get","set","escape","has","unset","clear","toJSON","sync","fetch","save","destroy","keys","values","pairs","invert","pick","omit","validate","isValid","url","parse","clone","isNew","hasChanged","changedAttributes","previous","previousAttributes"],a={};r.each(u,function(e){a[e]=r.partial(o.prototype.invokeModelMethod,e)}),o.proto(a);var f=["id","idAttribute","cid","attributes","changed","defaults","validationError","urlRoot"],l={};r.each(f,function(e){l[e]=r.partial(o.prototype.retrieveModelProperty,e)}),o.proto(l)});