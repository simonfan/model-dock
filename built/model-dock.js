//     model-dock
//     (c) simonfan
//     model-dock is licensed under the MIT terms.

define("model-dock",["require","exports","module","lodash","subject","backbone"],function(t,e,o){var i=t("lodash"),r=t("subject"),a=t("backbone"),s=o.exports=r({initialize:function(t){this.initializeModelDock(t)},initializeModelDock:function(t){t&&t.model&&this.attach(t.model)},invokeModelMethod:function(t){if(this.model){var e=Array.prototype.slice.call(arguments,1);return this.model[t].apply(this.model,e)}throw new Error("No model attached to dock. Unable to invoke "+t)},retrieveModelProperty:function(t){if(this.model)return this.model[t];throw new Error("No model attached to dock. Unable to retrieve "+t)},attach:function(t,e){return this.detach(),this.model=t,this.listenTo(this.model,"all",this.trigger),e&&e.silent||this.trigger("attach",t),this},detach:function(t){if(this.model){var e=this.model;this.stopListening(e),this.model=void 0,t&&t.silent||this.trigger("detach",e)}return this}});s.proto(a.Events);var n=["get","set","escape","has","unset","clear","toJSON","sync","fetch","save","destroy","keys","values","pairs","invert","pick","omit","validate","isValid","url","parse","clone","isNew","hasChanged","changedAttributes","previous","previousAttributes"],l={};i.each(n,function(t){l[t]=i.partial(s.prototype.invokeModelMethod,t)}),s.proto(l);var d=["id","idAttribute","cid","attributes","changed","defaults","validationError","urlRoot"],h={};i.each(d,function(t){h[t]=i.partial(s.prototype.retrieveModelProperty,t)}),s.proto(h)});